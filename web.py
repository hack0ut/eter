import configparser
from redis import Redis
from modules import account_manage, generate_code, notification, telegram
from flask import Flask, render_template, session, redirect, request

app = Flask(__name__)
redis = Redis(decode_responses=True) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
config = configparser.ConfigParser() # –ü–∞—Ä—Å–µ—Ä –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
config.read("web.ini")


@app.route("/") # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def index():
    uid = 0
    name = None
    password = None
    if "password" in session: # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        name = session['name']
        uid = session['uid']
        password = session['password']
    if redis.get("id") is None:
        uids = 0 # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    else:
        uids = redis.get("id")
    return render_template("index.html", uid=uid, name=name, uids=uids, password=password)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏


@app.route("/feedback/sent", methods=['POST']) # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞
def feedback_sent():
    if "password" in session: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        name = session['name']
        uid = session['uid']
        email = session['email']
        rate = request.values['rate']
        fbk = request.values['feedback']
        telegram.send_message(f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n\nüë§ {name}\nüì™ {email}\nüÜî {uid}\nüí¨ {fbk}\nüåü {rate}\n\n#feedback #–æ—Ç–∑—ã–≤")
        return notification.send_message('–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', '/')
    else:
        return notification.send_message('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', '/')


@app.route("/feedback")
def feedback():
    return render_template("feedback.html") # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å feedback'–æ–º


@app.route("/contacts")
def contacts():
    return render_template("contacts.html") # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏


@app.route('/FAQ')
def fast_answer_question():
    return render_template("faq.html") # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å Fast Answer Question


@app.route('/new_quest/sent', methods=['POST']) # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ —Å–∞–π—Ç–µ
def send_question():
    if "password" in session:
        name = session['name']
        uid = session['uid']
        email = session['email']
        text = request.values['text']
        telegram.send_message(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!\n\nüë§ {name}\nüì™ {email}\nüÜî {uid}\nüí¨ {text}\n\n#question #–≤–æ–ø—Ä–æ—Å")
        return notification.send_message('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', '/')
    else:
        return notification.send_message('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', '/FAQ')


@app.route('/new_question') # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def question():
    if "password" in session:
        return render_template("new_question.html")
    else:
        return notification.send_message('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', '/FAQ')


@app.route("/get_key")
def give_access_key(): # –í—ã–¥–∞—á–∞ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    if "password" in session:
        code = generate_code.proccess_start()
        redis.set(f"email:{session['email']}:access_key", code)
        return f'–í–∞—à –∫–æ–¥ - {code}. <br><br><a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>' # –ù–µ–º–Ω–æ–≥–æ –∫–æ—Å—Ç—ã–ª–µ–π
    else:
        return notification.send_message("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", "/")


@app.route("/deactivate")
def deactivate_profile(): # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π(—É–¥–∞–ª–µ–Ω–∏–µ–º) –ø—Ä–æ—Ñ–∏–ª—è
    if "password" in session:
        return render_template("deactivate_profile.html")
    else:
        return notification.send_message("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", "/")


@app.route("/deactivate/start", methods=['POST']) # –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
def deactivate_profile_start():
    if "password" in session:
        if request.values['access_key'] == redis.get(f"email:{session['email']}:access_key"):
            account_manage.delete_account(session['email'])
            return notification.send_message("–ê–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω. –ù–∞–¥–µ—é—Å—å, –µ—â–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è :)", "/")
        else:
            return notification.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞!", "/deactivate")
    else:
        return notification.send_message("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", "/")


@app.route('/profile') # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
def profile():
    if "password" in session:
        email, name, bday, password, gender, uid, age = account_manage.get_info(False)
        return render_template("profile.html", email=email, name=name, bday=bday, password=password,
                               gender=gender, uid=uid, age=age)
    else:
        return notification.send_message("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", "/")


@app.route('/logout') # –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
def logout():
    if "password" in session:
        account_manage.logout()
        return notification.send_message("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!", "/")
    else:
        return redirect("/")


@app.route('/login') # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def login():
    if "password" in session:
        return redirect("/")
    else:
        return render_template("login.html")


@app.route('/fastlogin', methods=['POST']) # –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def login_redis():
    email = request.values['email']
    password = request.values['password']
    if redis.get(f"email:{email}") == "registered":
        if redis.get(f"email:{email}:password") == password:
            account_manage.authorize_account(email, password)
            return notification.send_message(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º {email}.", "/")
        else:
            return notification.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!", "/login")
    else:
        return notification.send_message("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", "/login")


@app.route('/register') # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def registration():
    if "password" in session:
        return redirect("/")
    else:
        return render_template("register.html")


@app.route('/fastreg', methods=['POST']) # –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def register_redis():
    email = request.values['email']
    name = request.values['name']
    bday = request.values['bday']
    gender = request.values['gender']
    password = request.values['password']
    confirm_password = request.values['confirm_password']
    uid = redis.incr("id")
    uids = redis.get("id")
    if redis.get(f"email:{email}") == "registered":
        return notification.send_message("–î–∞–Ω–Ω—ã–π E-Mail —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", "/register")
    else:
        if password == confirm_password:
            account_manage.create_email_account(email, name, bday, password, gender, uid)
            return notification.send_message(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í—ã —É–∂–µ {uids} –≤ —Å–∏—Å—Ç–µ–º–µ!", "/")
        else:
            return notification.send_message("–í–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", "/register")


if __name__ == '__main__':
    telegram.web_started(beta=False) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    app.secret_key = generate_code.proccess_start() # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "—Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"
    context = ('keys/cert.crt', 'keys/key.key') # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    app.run(config["webserver"]["web_domain"], int(config["webserver"]["web_port"]), ssl_context=context) # –ó–∞–ø—É—Å–∫ —Å–∞–π—Ç–∞
